@page "/winners"

@using Entities.Component
@using Entities.DTO
@using Services.Helpers
@using Services.Interface
@using SMSDOME_Standard_Contest_BlazorServer.Pages.Component
@using Entities.Constants

@inject IToastService _toastService
@inject IContestService _contestService
@inject IEntriesService _entriesSerivce
@inject IJSRuntime _js;

<div class="w-75 m-auto">
    <h3>Winner Selection</h3>
    <p>Pick Winner based on group</p>
    <div class="w-75 m-auto">
        <EditForm Model="@option" OnValidSubmit="@Filter">
            <div class="form-group mt-3">
                <label class="form-label fw-bold">Group Name </label>
            </div>
            @* <InputText @bind-Value=""></InputText> *@
            <DropDownList DataSource="contestDropDownItems" ValueChanged="OnContestSelected" HasSearch="true"></DropDownList>

            <div class="form-group">
                <label class="form-label fw-bold">Date</label>
                <div class="d-flex align-items-center gap-2">
                    <DateInput Id="startDate" @bind-Value="option.StartDate"></DateInput>
                    <span>-</span>
                    <DateInput Id="endDate" @bind-Value="option.EndDate"></DateInput>
                </div>
            </div>

            <div class="form-group mt-3">
                <label class="form-label fw-bold">Entries Status </label>
            </div>
            <DropDownList DataSource="GlobalConstants.EntryValidityOptions" @bind-Value="option.EntryValidity"></DropDownList>


            <button type="submit" class="btn btn-primary mt-3">Filter</button>
        </EditForm>
    </div>
</div>


@if (show == true)
{
    @if (data == null)
    {
        <div class="w-100 text-center mt-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

    }
    else
    {
        <div class="w-50 m-auto">
            <div class="w-50 m-auto">
                <button @onclick="PurgeSelectedEntries_Click" class="btn btn-danger">Purge Selected Entries</button><br />
                <button @onclick="ExportToCSV_Click" class="btn btn-outline-secondary">Export To CSV using comma</button><br />
                <button @onclick="DownloadFiles_Click" class="btn btn-outline-secondary">Download Files</button><br />
                <button @onclick="PurgeAllEntries_Click" class="btn btn-danger mb-3">Purge</button>
            </div>

        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    @foreach (var header in headers)
                    {
                        <th>@header.Key</th>
                    }
                </tr>
            </thead>

            <tbody>
                @foreach (var keyValuePair in data)
                {
                    <tr>
                        <td>
                            <input type="checkbox" @onclick="@(e => OnSelectedEntry(keyValuePair.ElementAt(0).Value))"
                                   value="@keyValuePair.ElementAt(0).Value">
                        </td>
                        @foreach (var value in keyValuePair)
                        {
                            if (value.Key == "FileLink")
                            {
                                <td>
                                    <a data-magnify="gallery" data-caption="" href="@value.Value">
                                        View
                                    </a>
                                </td>
                            }
                            else if (value.Key == "DateEntry")
                            {
                                <td>@Convert.ToDateTime(value.Value).ToString("dd MMM yyyy HH:mm:ss")</td>
                            }
                            else
                            {
                                <td>@value.Value</td>
                            }

                        }
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<int> selectedEntriesID = new List<int>();
    private bool show = false;
    private List<Dictionary<string, object>> data = null;
    private Dictionary<string, object> headers = null;
    private Option option = new Option()
        {
            StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 00, 00, 00),
            EndDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 23, 59, 59),
            EntryValidity = "",
            PageSize = 50,
            PageNumber = 1
        };
    private List<DropDownItemData<string>> contestDropDownItems = new();
    private List<ContestOverView> contests = new();
    protected override async Task OnInitializedAsync()
    {
        var res = await _contestService.LoadAllContestAsync();
        if (res.IsSuccess)
        {
            contests = res.Data;
            contestDropDownItems = contests.ToDropDownList(p => p.ContestUniqueCode, p => p.ContestUniqueCode);
        }
    }
    private async Task Filter()
    {
        show = true;
        var result = await _entriesSerivce.GetAllEntriesAsync(option);
        if (result.IsSuccess == true && result.Data.Count() > 0)
        {
            if (result.Data.Any())
            {
                data = result.Data;
                headers = result.Data[0];
            }
        }
        else
        {
            data?.Clear();
            show = false;
            _toastService.ShowError("No Entries Found!");
        }
    }

    private async Task PurgeSelectedEntries_Click()
    {
        var result = await _entriesSerivce.PurgeSelectedEntriesAsync("", selectedEntriesID);
        if (result.IsSuccess == true)
        {
            data = null;
            show = false;
            selectedEntriesID.Clear();
        }
    }

    private async Task PurgeAllEntries_Click()
    {
        var result = await _entriesSerivce.PurgeAllEntriesAsync("");
        if (result.IsSuccess == true)
        {
            data = null;
            show = false;
            selectedEntriesID.Clear();
        }
    }

    private async Task ExportToCSV_Click()
    {
        var result = await _entriesSerivce.GetEntriesCSV("250119_TIGER");
        if (result.IsSuccess == true)
        {
            data = null;
            show = false;
            selectedEntriesID.Clear();
            await _js.InvokeVoidAsync("saveAsFile", "entries.csv", "text/csv", result.Data);
        }
    }

    private async Task DownloadFiles_Click()
    {

    }

    private void OnSelectedEntry(object e)
    {
        var checkedEntryID = Convert.ToInt32(e);
        var isEntryChecked = selectedEntriesID.Contains(checkedEntryID);
        if (isEntryChecked == false)
        {
            selectedEntriesID.Add(checkedEntryID);
        }
        else
        {
            selectedEntriesID.Remove(checkedEntryID);
        }
    }

    private void OnContestSelected(string contestUniqueCode)
    {
        option.ContestUniqueCode = contestUniqueCode;
        option.StartDate = contests.Where(p => p.ContestUniqueCode == contestUniqueCode).FirstOrDefault().StartDate;
        option.EndDate = contests.Where(p => p.ContestUniqueCode == contestUniqueCode).FirstOrDefault().EndDate;
    }
}
