@using Services.Interface
@using Entities.ToastConfig

@inject IToastService _ToastService;
@inject IJSRuntime _js;

@if(ToastList.Any()){
    <div class="toast__container">
        <CascadingValue Value="this">
            @foreach (var toast in ToastList.OrderBy(x => x.TimeStamp))
            {
                <Toast ToastSettings="toast.ToastSettings" ToastId="toast.Id"></Toast>
            }
        </CascadingValue>
    </div>
}

<script>

</script>

@code {
    [Parameter]
    public string InfoClass { get; set; } 
    [Parameter]
    public string InfoIconClass { get; set; } 
    [Parameter]
    public string SuccessClass { get; set; }
    [Parameter]
    public string SuccessIconClass { get; set; } 
    [Parameter]
    public string WarningClass { get; set; }
    [Parameter]
    public string WarningIconClass { get; set; } 
    [Parameter]
    public string ErrorClass { get; set; }
    [Parameter]
    public string ErrorIconClass { get; set; }
    public ToastPosition ToastPosition { get; set; } = ToastPosition.TopRight;
    [Parameter]
    public int Timeout { get; set; }
    public string PositionClass { get; set; } = string.Empty;
    internal List<ToastInstance> ToastList { get; set; } = new List<ToastInstance>();
    protected override async void OnInitialized()
    {
        _ToastService.OnShow += ShowToast;
        PositionClass = $"position-{PositionClass.ToString().ToLower()}";
    }
    public void RemoveToast(Guid toastID){
        InvokeAsync(() =>
        {
            var toastInstance = ToastList.SingleOrDefault(x => x.Id == toastID);
            ToastList.Remove(toastInstance);
            StateHasChanged();
        });
    }
    private ToastSettings BuildToastSettings(ToastLevel level, string message, string heading){
        switch(level){
            case ToastLevel.Info:
                return new ToastSettings(string.IsNullOrWhiteSpace(heading) ? "Info" : heading, message, "", InfoClass, InfoIconClass);
            case ToastLevel.Success:
                return new ToastSettings(string.IsNullOrWhiteSpace(heading) ? "Success" : heading, message, "", SuccessClass, SuccessIconClass);
            case ToastLevel.Warning:
                return new ToastSettings(string.IsNullOrWhiteSpace(heading) ? "Warning" : heading, message, "", WarningClass, WarningIconClass);
            case ToastLevel.Error:
                return new ToastSettings(string.IsNullOrWhiteSpace(heading) ? "Error" : heading, message, "", ErrorClass, ErrorIconClass);
        }
        throw new InvalidOperationException();
    }
    public void ShowToast(ToastLevel level, string message, string heading){
        InvokeAsync(() =>
        {
            var settings = BuildToastSettings(level, message, heading);
            var toast = new ToastInstance
                {
                    Id = Guid.NewGuid(),
                    TimeStamp = DateTime.UtcNow,
                    ToastSettings = settings
                };
            ToastList.Add(toast);
            var timeout = Timeout * 1000;
            var toastTimer = new System.Timers.Timer(timeout);
            toastTimer.Elapsed += (sender, args) => { RemoveToast(toast.Id); };
            toastTimer.AutoReset = false;
            toastTimer.Start();
            StateHasChanged();
        });
    }
}
